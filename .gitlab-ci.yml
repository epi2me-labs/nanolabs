include:
    - project: "epi2melabs/ci-templates"
      file: "push-github.yaml"

variables:
      OWNER: ontresearch
      GIT_SUBMODULE_STRATEGY: recursive
      PUSH_IMAGE: "nanolabs-notebook"
image: ${IMAGE}

stages:
    - build
    - release
    - downstream

# on dev branch, push image with tag dev-<commit_sha>
#   - used below in manual and main job
#   - images from dev commits also go to dockerhub via
#     the push:dev-dockerhub job
.build:docker-after: &build-docker-after |
    if [[ ${CI_COMMIT_BRANCH} == 'dev' ]]; then
        echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${ONTREGISTRY};
        TAG=${ONTREGISTRY}/${CI_PROJECT_PATH}/${PUSH_IMAGE}:${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA};
        echo "Pushing ${TAG}";
        docker tag ontresearch/${PUSH_IMAGE}:latest ${TAG};
        docker push ${TAG};
    fi;

.get_dependency_versions: &get_dependency_versions |
    # obtain aplanat and epi2melabs versions
    # TODO: do this another way?
    mkdir deps && cd deps;
    git clone https://${CI_SERVER_HOST}/epi2melabs/aplanat \
      && cd aplanat \
      && VER=$(git describe --tags $(git rev-list --tags --max-count=1)) \
      && export APLANAT_VERSION=${VER/v/} \
      && cd ..;
    git clone https://${CI_SERVER_HOST}/epi2melabs/epi2melabs \
      && cd epi2melabs \
      && VER=$(git describe --tags $(git rev-list --tags --max-count=1)) \
      && export EPI2MELABS_VERSION=${VER/v/} \
      && cd ..;
    git clone https://${CI_SERVER_HOST}/epi2melabs/mapula \
      && cd mapula \
      && VER=$(git describe --tags $(git rev-list --tags --max-count=1)) \
      && export MAPULA_VERSION=${VER/v/} \
      && cd ..;
    echo "Using versions:";
    echo "  aplanat   : ${APLANAT_VERSION}";
    echo "  epi2melabs: ${EPI2MELABS_VERSION}";
    echo "  mapula: ${MAPULA_VERSION}";
    cd ..;


# The main job. First time on a branch all images will be built,
# subsequent build will try to reuse intermediate images if nothing
# has changed in the associated dockerfile.
build:docker:
    stage: build
    only:
        - branches
    before_script:
        - apk add make bash git openssl
        - *get_dependency_versions
    script:
        - >
          REBUILD=false;
          if [[ ${CI_COMMIT_BRANCH} == 'dev' ]]; then
            echo "=================================================="
            echo "Rebuilding all from scratch because branch is: dev"
            echo "=================================================="
            REBUILD=true;
          fi
          
          for CURRENT in picolabs nanolabs; do
            IMAGE=${CURRENT}-notebook
            DOCKERFILE=${CURRENT}.dockerfile
            TAG=${ONTREGISTRY}/${CI_PROJECT_PATH}/${IMAGE}:${CI_COMMIT_REF_NAME}

            # Try to pull, test below checks if this worked
            if ! ${REBUILD} ; then
              echo "Attempting to pull ${TAG}"
              docker pull ${TAG} \
                && docker tag $TAG $OWNER/$IMAGE:latest \
                || echo "Failed to pull image"
            fi

            # rebuild if necessary
            if $REBUILD; then
              echo "Parent image changed, rebuilding"
              make $IMAGE
              REBUILD=true
            elif [[ "$(docker images -q ${TAG} 2> /dev/null)" == "" ]]; then
              echo "${IMAGE} not yet built for ref ${CI_COMMIT_REF_NAME}, building"
              make $IMAGE
              REBUILD=true
            elif [[ -f $DOCKERFILE ]] && [[ ! "$(git diff HEAD~ $DOCKERFILE)" == "" ]]; then
              echo "Changes have been made to ${IMAGE}'s dockerfile, rebuilding"
              make $IMAGE
              REBUILD=true
            fi

            # if we just rebuilt, push the container for possible later CI runs
            if $REBUILD ; then
              echo "Logging in to internal gitlab container registry"
              echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${ONTREGISTRY};
              echo "Pushing ${TAG}";
              docker tag $OWNER/$IMAGE:latest ${TAG};
              docker push ${TAG};
            fi;
          done;
        # if dev branch, push a tag "dev-<commit_sha>",
        # see also push:dev-dockerhub:
        - *build-docker-after


# manual build doing all images from scratch
build:docker-manual:
    stage: build
    when: manual
    before_script:
        - apk add make bash git openssl
        - *get_dependency_versions
    script:
        - make picolabs-notebook
        - make nanolabs-notebook
        - *build-docker-after


# pull dev-<commit_sha> image tag from internal registry
.pushstub: &pull_tag
    stage: release
    before_script:
        - ORIG_TAG=${ONTREGISTRY}/${CI_PROJECT_PATH}/${PUSH_IMAGE}:dev-${CI_COMMIT_SHORT_SHA}
        - echo "Pulling ${ORIG_TAG}"
        - docker pull ${ORIG_TAG}

# push to dockerhub, requires target image ${TAG}
.pushhubstub: &push_hub
    <<: *pull_tag
    script:
        - echo ${DOCKERHUB_TOKEN} | docker login --username epi2melabs --password-stdin
        - echo "Pushing ${TAG}"
        - docker tag ${ORIG_TAG} ${TAG}
        - docker push ${TAG}

# Push tag to ONT, requires target image ${TAG}
push:tag-internal:
    only:
        - tags
    <<: *pull_tag
    script:
        - echo ${CI_BUILD_TOKEN} | docker login --username gitlab-ci-token --password-stdin ${ONTREGISTRY}
        - TAG=${ONTREGISTRY}/${CI_PROJECT_PATH}/${PUSH_IMAGE}:${CI_COMMIT_TAG}
        - echo "Pushing ${TAG}"
        - docker tag ${ORIG_TAG} ${TAG}
        - docker push ${TAG}

# Push git tags to dockerhub
push:tag-dockerhub:
    only:
        - tags
    variables:
        TAG: ontresearch/${PUSH_IMAGE}:${CI_COMMIT_TAG}
    <<: *push_hub

# Push dev commit to dockerhub
push:dev-dockerhub:
    only:
        - /^dev$/
    except:
        - tags
    variables:
        TAG: ontresearch/${PUSH_IMAGE}:dev
    <<: *push_hub


# when we've tagged rebuild the downstream
downstream:epi2melabs:
    stage: downstream
    trigger:
        project: epi2melabs/tutorials
        branch: dev
    only:
        - tags
        - /^dev$/

